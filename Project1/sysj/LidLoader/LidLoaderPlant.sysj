Plant(
		input signal pusherExtend,vacOn,armSource,armDest;
		//input signal enable,refill;
		output signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest; //,empty;
		//output signal pusherRetractedE,pusherExtendedE,WPgrippedE,armAtSourceE,armAtDestE,emptyE;
		)
->
{
	signal capDec;
	int signal capPos;
	emit capPos(0);
	{// Arm
		while(true){
			abort(armSource){
				sustain armAtDest;
			}
			pause;
			//await(!enable);
			abort(armDest){
				sustain armAtSource;
			}
			pause;
			//await(!enable);
		}
	}
	||
	{// Pusher
		while(true){
			abort(pusherExtend){
				sustain pusherRetracted;
			}
			pause;
			//await(!enable);
			abort(!pusherExtend){
				sustain pusherExtended;
			}
			pause;
			//await(!enable);
		}
	}
	||
	{// Vacuum
		while(true){
			present(vacOn && armAtSource){
				if((Integer)#capPos == 1){
					emit capPos(0);
					abort(!vacOn){
						sustain WPgripped; 
					}
					present(armAtSource){
						emit capPos(1);
					}
				}
			}
			pause;
		}
	}
	||
	{
		/*
		 * Cap positions
		 * 0 = at Mag
		 * 1 = at pick-up
		 */
		while(true){
			// At mag
			abort(empty){
				while(true){
						await(pusherRetracted);
						await(pusherExtended);
						// At pick-up
						emit capPos(1);
						await(pusherRetracted);
						emit capDec;
				}
			}
			await(refill);
		}
	}
// 	||
// 	{
// 		int capcount = 5;
// 		while(true){
// 			present(capDec){
// 				if(capcount > 0)
// 					capcount--;
// 			}
// 			present(refill){
// 				capcount = 5;
// 			}
// //			present(pusherRetracted){
// 				if(capcount == 0)
// 					emit empty;
// //			}
// 			pause;
// 		}
// 	}
	||
	{// To viz
		{while(true){present(pusherRetracted){emit pusherRetractedE;} pause;}}
		||
		{while(true){present(pusherExtended){emit pusherExtendedE;} pause;}}
		||
		{while(true){present(WPgripped){emit WPgrippedE;} pause;}}
		||
		{while(true){present(armAtSource){emit armAtSourceE;} pause;}}
		||
		{while(true){present(armAtDest){emit armAtDestE;} pause;}}
		||
		{while(true){present(empty){emit emptyE;} pause;}}
	}
}
